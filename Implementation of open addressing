#include <stdio.h>
#define SIZE 10
#define EMPTY -1

int hashTable[SIZE];

void initTable() {
    for (int i = 0; i < SIZE; i++) hashTable[i] = EMPTY;
}

int hashFunction(int key) {
    return key % SIZE;
}

void insertLinear(int key) {
    int index = hashFunction(key);
    for (int i = 0; i < SIZE; i++) {
        int probeIndex = (index + i) % SIZE; // Linear Probing
        if (hashTable[probeIndex] == EMPTY) {
            hashTable[probeIndex] = key;
            return;
        }
    }
    printf("Table is full. Unable to insert key: %d\n", key);
}

void insertQuadratic(int key) {
    int index = hashFunction(key);
    for (int i = 0; i < SIZE; i++) {
        int probeIndex = (index + i * i) % SIZE; // Quadratic Probing
        if (hashTable[probeIndex] == EMPTY) {
            hashTable[probeIndex] = key;
            return;
        }
    }
    printf("Table is full. Unable to insert key: %d\n", key);
}

int search(int key) {
    int index = hashFunction(key);
    for (int i = 0; i < SIZE; i++) {
        int probeIndex = (index + i) % SIZE; // Default to Linear Probing
        if (hashTable[probeIndex] == key) return probeIndex;
        if (hashTable[probeIndex] == EMPTY) return -1; // Key not found
    }
    return -1; // Key not found
}

void display() {
    for (int i = 0; i < SIZE; i++)
        printf("Index %d: %d\n", i, hashTable[i] == EMPTY ? -1 : hashTable[i]);
}

int main() {
    initTable();
    printf("Inserting with Linear Probing...\n");
    insertLinear(15);
    insertLinear(25);
    insertLinear(35);
    display();

    printf("\nSearching for key 25: Found at index %d\n", search(25));

    printf("\nInserting with Quadratic Probing...\n");
    initTable(); // Clear table
    insertQuadratic(15);
    insertQuadratic(25);
    insertQuadratic(35);
    display();

    printf("\nSearching for key 35: Found at index %d\n", search(35));
    return 0;
}
