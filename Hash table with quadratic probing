#include <stdio.h>
#define SIZE 10
#define EMPTY -1

int hashTable[SIZE];

void initTable() {
    for (int i = 0; i < SIZE; i++) hashTable[i] = EMPTY;
}

int hashFunction(int key) {
    return key % SIZE;
}

void insert(int key) {
    int index = hashFunction(key);
    for (int i = 0; i < SIZE; i++) {
        int probeIndex = (index + i * i) % SIZE;
        if (hashTable[probeIndex] == EMPTY) {
            hashTable[probeIndex] = key;
            return;
        }
    }
    printf("Table is full, unable to insert key: %d\n", key);
}

int search(int key) {
    int index = hashFunction(key);
    for (int i = 0; i < SIZE; i++) {
        int probeIndex = (index + i * i) % SIZE;
        if (hashTable[probeIndex] == key) return probeIndex;
        if (hashTable[probeIndex] == EMPTY) return -1;
    }
    return -1;
}

void display() {
    for (int i = 0; i < SIZE; i++)
        printf("Index %d: %d\n", i, hashTable[i]);
}

int main() {
    initTable();
    insert(15);
    insert(25);
    insert(35);
    display();
    printf("Search 25: Found at index %d\n", search(25));
    return 0;
}
