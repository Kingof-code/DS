#include <stdio.h>
#include <stdlib.h>

typedef struct AVL {
    int data, height;
    struct AVL *left, *right;
} Node;

int height(Node* node) { return node ? node->height : 0; }

int balanceFactor(Node* node) { return height(node->left) - height(node->right); }

Node* rotateLeft(Node* node) {
    Node* temp = node->right;
    node->right = temp->left;
    temp->left = node;
    node->height = 1 + (height(node->left) > height(node->right) ? height(node->left) : height(node->right));
    temp->height = 1 + (height(temp->left) > height(temp->right) ? height(temp->left) : height(temp->right));
    return temp;
}

Node* rotateRight(Node* node) {
    Node* temp = node->left;
    node->left = temp->right;
    temp->right = node;
    node->height = 1 + (height(node->left) > height(node->right) ? height(node->left) : height(node->right));
    temp->height = 1 + (height(temp->left) > height(temp->right) ? height(temp->left) : height(temp->right));
    return temp;
}

Node* insert(Node* root, int data) {
    if (!root) {
        root = malloc(sizeof(Node));
        root->data = data, root->left = root->right = NULL, root->height = 1;
        return root;
    }
    if (data < root->data) root->left = insert(root->left, data);
    else if (data > root->data) root->right = insert(root->right, data);

    root->height = 1 + (height(root->left) > height(root->right) ? height(root->left) : height(root->right));
    int bf = balanceFactor(root);

    if (bf > 1 && data < root->left->data) return rotateRight(root);
    if (bf < -1 && data > root->right->data) return rotateLeft(root);
    if (bf > 1 && data > root->left->data) root->left = rotateLeft(root->left), root = rotateRight(root);
    if (bf < -1 && data < root->right->data) root->right = rotateRight(root->right), root = rotateLeft(root);

    return root;
}

void inorder(Node* root) {
    if (!root) return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

int main() {
    Node* root = NULL;
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    printf("Inorder Traversal: ");
    inorder(root);
    return 0;
}
